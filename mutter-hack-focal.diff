diff --git a/src/core/stack.c b/src/core/stack.c
index f7e0f1b..cd6d587 100644
--- a/src/core/stack.c
+++ b/src/core/stack.c
@@ -264,6 +264,14 @@ meta_stack_changed (MetaStack *stack)
   g_signal_emit (stack, signals[CHANGED], 0);
 }
 
+static void meta_stack_below_focus(MetaWindow *window)
+{
+  MetaWindow *focus_window = window->display->focus_window;
+  if (!focus_window || focus_window->stack_position > window->stack_position)
+    return;
+  meta_window_set_stack_position_no_sync(window, focus_window->stack_position);
+}
+
 void
 meta_stack_add (MetaStack  *stack,
                 MetaWindow *window)
@@ -289,6 +297,9 @@ meta_stack_add (MetaStack  *stack,
 
   window->stack_position = stack->n_positions;
   stack->n_positions += 1;
+
+  meta_stack_below_focus(window);
+
   meta_topic (META_DEBUG_STACK,
               "Window %s has stack_position initialized to %d\n",
               window->desc, window->stack_position);
diff --git a/src/core/window.c b/src/core/window.c
index 732470b..9188729 100644
--- a/src/core/window.c
+++ b/src/core/window.c
@@ -2245,11 +2245,15 @@ window_state_on_map (MetaWindow *window,
                      gboolean *takes_focus,
                      gboolean *places_on_top)
 {
+#if 0
   gboolean intervening_events;
 
   intervening_events = intervening_user_event_occurred (window);
 
   *takes_focus = !intervening_events;
+#else
+  *takes_focus = window && window->display->focus_window && meta_window_same_application(window, window->display->focus_window);
+#endif
   *places_on_top = *takes_focus;
 
   /* don't initially focus windows that are intended to not accept
@@ -3448,7 +3452,7 @@ meta_window_make_above (MetaWindow  *window)
   g_return_if_fail (!window->override_redirect);
 
   meta_window_set_above (window, TRUE);
-  meta_window_raise (window);
+  // meta_window_raise (window);
 }
 
 void
@@ -3457,7 +3461,7 @@ meta_window_unmake_above (MetaWindow  *window)
   g_return_if_fail (!window->override_redirect);
 
   meta_window_set_above (window, FALSE);
-  meta_window_raise (window);
+  // meta_window_raise (window);
 }
 
 static void
@@ -3496,12 +3500,12 @@ meta_window_make_fullscreen_internal (MetaWindow  *window)
       meta_window_save_rect (window);
 
       window->fullscreen = TRUE;
-
+#if 0
       meta_stack_freeze (window->display->stack);
 
       meta_window_raise (window);
       meta_stack_thaw (window->display->stack);
-
+#endif
       meta_window_recalc_features (window);
       set_net_wm_state (window);
 
@@ -3656,7 +3660,7 @@ meta_window_shade (MetaWindow  *window,
       meta_topic (META_DEBUG_FOCUS,
                   "Re-focusing window %s after shading it\n",
                   window->desc);
-      meta_window_focus (window, timestamp);
+      // meta_window_focus (window, timestamp);
 
       set_net_wm_state (window);
     }
@@ -3680,7 +3684,7 @@ meta_window_unshade (MetaWindow  *window,
       meta_topic (META_DEBUG_FOCUS,
                   "Focusing window %s after unshading it\n",
                   window->desc);
-      meta_window_focus (window, timestamp);
+      // meta_window_focus (window, timestamp);
 
       set_net_wm_state (window);
     }
@@ -8313,9 +8317,10 @@ meta_window_handle_enter (MetaWindow  *window,
     case G_DESKTOP_FOCUS_MODE_CLICK:
       break;
     }
-
+#if 0
   if (window->type == META_WINDOW_DOCK)
     meta_window_raise (window);
+#endif
 }
 
 void
diff --git a/src/x11/window-x11.c b/src/x11/window-x11.c
index 11a588d..7cacd1a 100644
--- a/src/x11/window-x11.c
+++ b/src/x11/window-x11.c
@@ -3041,7 +3041,8 @@ meta_window_x11_client_message (MetaWindow *window,
         {
           if ((action == _NET_WM_STATE_ADD) ||
               (action == _NET_WM_STATE_TOGGLE && !window->wm_state_demands_attention))
-            meta_window_make_above (window);
+            // meta_window_make_above (window);
+            ;
           else
             meta_window_unmake_above (window);
         }
@@ -3259,9 +3260,14 @@ meta_window_x11_client_message (MetaWindow *window,
     {
       MetaClientType source_indication;
       guint32        timestamp;
+      pid_t pid;
+      gboolean pass = window && display->focus_window && meta_window_same_application(window, display->focus_window);
 
-      meta_verbose ("_NET_ACTIVE_WINDOW request for window '%s', activating\n",
-                    window->desc);
+      meta_verbose ("_NET_ACTIVE_WINDOW request for window '%s', %s\n",
+                    window->desc, pass ? "activating" : "ignored");
+
+      if (!pass)
+        return TRUE;
 
       source_indication = event->xclient.data.l[0];
       timestamp = event->xclient.data.l[1];
